# For documentation on config params, see:
# http://dev.mysql.com/doc/refman/5.5/en/mysql-cluster-ndbd-definition.html
# For overview:
# http://docs.oracle.com/cd/E17952_01/refman-5.5-en/mysql-cluster-ndb-innodb-engines.html

[NDBD DEFAULT] 
#Used by ndbmdmt to determine the number of LQH threads

#More flexible than MaxNoOfExecutionThreads, supports > 8 threads. Decide which service to bind each thread to.
#Increase NoOfFragmentLogParts to 8 or 16, if you have 8 or 16 ldm threads.
#Threadconfig=main={cpubind=0},ldm={count=8,cpubind=1,2,3,4,13,14,15,16},io={count=4,cpubind=5,6,17,18},rep={cpubind=7},recv={count=2,cpubind=8,19}

# In order to take advantage of the enhanced stability that the use of ThreadConfig offers, it is necessary to ensure that CPUs are isolated,
# and that they are not subject to interrupts, or to being scheduled for other tasks by the operating system. 
# On many Linux systems, you can do this by setting IRQBALANCE_BANNED_CPUS in /etc/sysconfig/irqbalance to 0xFFFFF0, and by using the isolcpus boot option in grub.conf. 
# For specific information, see your operating system or platform documentation.
<% cpus = (node['cpu']['total'] / 2) + 1 -%>
<% if cpus < 2
     cpus = 2
   elsif cpus > 7
     cpus = 8
   elsif cpus > 15
     cpus = 16
   elsif cpus > 23
     cpus = 24
   elsif cpus > 31
     cpus = 32
   end
   cpus = node['ndb']['MaxNoOfExecutionThreads'].empty? ? cpus : node['ndb']['MaxNoOfExecutionThreads']
-%>

<% threads = if node['ndb']['ThreadConfig'].empty?
                   "MaxNoOfExecutionThreads = " + cpus.to_s
               else
                   "ThreadConfig = #{node['ndb']['ThreadConfig']}"
               end
-%>
<%= threads  %>



# Valid values: 4, 8, 16, 32. For 8 ldm threads, increase to 8. For 16 ldm threads, increase to 16.
NoOfFragmentLogParts=<%= node['ndb']['NoOfFragmentLogParts'] %>
NoOfFragmentLogFiles=<%= node['ndb']['NoOfFragmentLogFiles'] %>

#The size of a Redo Log file on disk. Read: https://mikaelronstrom.blogspot.com/2018/08/more-automated-control-in-mysql-cluster.html
FragmentLogFileSize=<%= node['ndb']['FragmentLogFileSize'] %>

#The number of copies of the data stored on different nodes in the cluster
NoOfReplicas=<%= node['ndb']['NoOfReplicas'] %>

#The amount of main memory (RAM) used to store columns and ordered indexes in tables, plus some overhead


DataMemory=<%= node['ndb']['DataMemory'] %>M


#As of MySQL Cluster 5.6.7, IndexMemory is deprecated.
#The amount of main memory (RAM) used to hash indexes in tables, plus some overhead
# Calculate IndexMemory size, can be overriden by user setting node['ndb']['IndexMemory']
<% index_mem = if node['ndb']['IndexMemory'].empty?
                   (node['ndb']['DataMemory'].to_i / 4).to_s
               else
                   node['ndb']['IndexMemory']
               end
-%>
#IndexMemory=<%= index_mem  %>M

# Setting this parameter to TRUE or 1 binds IP_ADDR_ANY so that connections can be made from anywhere (for autogenerated connections). The default is FALSE (0).
TcpBind_INADDR_ANY=<%= node['ndb']['TcpBind_INADDR_ANY'] %>

# maximum number of attributes, tables, indexes, and trigger objects used by indexes, events, and replication between clusters
MaxNoOfAttributes=<%= node['ndb']['MaxNoOfAttributes'] %>

# A table object is allocated for each table and for each unique hash index in the cluster.
MaxNoOfTables=<%= node['ndb']['MaxNoOfTables'] %>

MaxNoOfOrderedIndexes=<%= node['ndb']['MaxNoOfOrderedIndexes'] %>

MaxNoOfUniqueHashIndexes=<%= node['ndb']['MaxNoOfUniqueHashIndexes'] %>

MaxDMLOperationsPerTransaction=<%= node['ndb']['MaxDMLOperationsPerTransaction'] %>

MaxNoOfConcurrentIndexOperations=<%= node['ndb']['MaxNoOfConcurrentIndexOperations'] %>

MaxNoOfConcurrentOperations=<%= node['ndb']['MaxNoOfConcurrentOperations'] %>

MaxNoOfConcurrentScans=<%= node['ndb']['MaxNoOfConcurrentScans'] %>

MaxNoOfConcurrentTransactions=<%= node['ndb']['MaxNoOfConcurrentTransactions'] %>

TransactionBufferMemory=<%= node['ndb']['TransactionBufferMemory'] %>

MaxParallelScansPerFragment=<%= node['ndb']['MaxParallelScansPerFragment'] %>

#The maximum number of bytes to store before flushing data to a local checkpoint file
#Ignored when ODirect is set to true
DiskSyncSize=<%= node['ndb']['DiskSyncSize'] %>

#The size of the RedoBuffer used to buffer writes to the disk subsystem. Increase for high write-rate or slow disk.
RedoBuffer=<%= node['ndb']['RedoBuffer'] %>

#Internal buffer used for passing messages within individual nodes and between nodes. Increase for huge batches.
LongMessageBuffer=<%= node['ndb']['LongMessageBuffer'] %>

#The maximum time in ms that is permitted to lapse between operations in the same transaction before the transaction is aborted.
TransactionInactiveTimeout=<%= node['ndb']['TransactionInactiveTimeout'] %>

TransactionDeadlockDetectionTimeout=<%= node['ndb']['TransactionDeadlockDetectionTimeout'] %>

#0: Disables locking. This is the default value.
#1: Performs the lock after allocating memory for the process.
#2: Performs the lock before memory for the process is allocated.
# Needs root privileges
LockPagesInMainMemory=<%= node['ndb']['LockPagesInMainMemory'] %>

# Setting these parameters allows you to take advantage of real-time scheduling
# of NDBCLUSTER threads to get higher throughput.
RealTimeScheduler=<%= node['ndb']['RealTimeScheduler'] %>

# Savings of up to 50% over noncompressed LCPs and backups
CompressedLCP=<%= node['ndb']['CompressedLCP'] %>
CompressedBackup=<%= node['ndb']['CompressedBackup'] %>

# Deprecated from version 5.6.7
#BackupMaxWriteSize= <%= node['ndb']['BackupMaxWriteSize'] %>
#BackupDataBufferSize= <%= node['ndb']['BackupDataBufferSize'] %>  


BackupLogBufferSize= <%= node['ndb']['BackupLogBufferSize'] %>

#The maximum size of the memory unit to use when allocating memory for tables
MaxAllocate=<%= node['ndb']['MaxAllocate'] %>

#The size of the table hash maps used by NDB
DefaultHashMapSize=<%= node['ndb']['DefaultHashMapSize'] %>

# Needs root privileges
ODirect=<%= node['ndb']['ODirect'] %>

# total amount of memory (in bytes) to be allocated by each node for which it is set for use among all configured transporters for all types of nodes (NDB, API, etc)
TotalSendBufferMemory=<%= node['ndb']['TotalSendBufferMemory'] %>
# amount of transporter send buffer memory to allocate in addition to any that has been set
ExtraSendBufferMemory=<%= node['ndb']['ExtraSendBufferMemory'] %>

# This parameter specifies the time in microseconds for threads to be executed in the scheduler before sleeping.
# Default = 0. Higher value to optimize latency over throughput.
SchedulerSpinTimer=<%= node['ndb']['SchedulerSpinTimer'] %> 

# Specifies the time in microseconds for threads to be executed in the scheduler before being sent. 
# Default is 50. Higher values give higher throughput at cost of increased latency.
SchedulerExecutionTimer=<%= node['ndb']['SchedulerExecutionTimer'] %>            

TwoPassInitialNodeRestartCopy=<%= node['ndb']['TwoPassInitialNodeRestartCopy'] %>
# Number of threads to create when rebuilding indexes during a system or node start
BuildIndexThreads=<%= node['ndb']['BuildIndexThreads'] %>

# Disable for 7.5.+
#SchedulerResponsiveness=<%= node['ndb']['SchedulerResponsiveness'] %>

Numa=<%= node['ndb']['Numa'] %>

# On-Disk data column configuration
DiskPageBufferEntries=<%= node['ndb']['DiskPageBufferEntries'] %>
DiskPageBufferMemory=<%= node['ndb']['DiskPageBufferMemory'] %>
# Memory used by disk data for buffers/paging
SharedGlobalMemory=<%= node['ndb']['SharedGlobalMemory'] %>
# number of unbound threads used for Disk Data file access
DiskIOThreadPool=<%= node['ndb']['DiskIOThreadPool'] %>


# Move this to another drive if you have a high number of ops/sec
# InitialLogFileGroup=<%= node['ndb']['InitialLogFileGroup'] %>

# Move this to another drive to store small files in HopsFS
#InitialTablespacename=<%= node['ndb']['InitialTablespacename'] %>

# https://mikaelronstrom.blogspot.com/2018/08/more-automated-control-in-mysql-cluster.html
EnableRedoControl=<%= node['ndb']['EnableRedoControl'] %>


<% if (node['ndb']['EnableRedoControl'] == "0") -%>
# Set the maximum rate for writing to disk, in bytes per second, by local checkpoints and backup operations when no restarts 
# (by this data node or any other data node) are taking place in this MySQL Cluster.
MaxDiskWriteSpeed=<%= node['ndb']['MaxDiskWriteSpeed'] %>

# Set the maximum rate for writing to disk, in bytes per second, by local checkpoints and backup operations when one or more data nodes 
# in this MySQL Cluster are restarting, other than this node.
MaxDiskWriteSpeedOtherNodeRestart=<%= node['ndb']['MaxDiskWriteSpeedOtherNodeRestart'] %>

MaxDiskWriteSpeedOwnRestart=<%= node['ndb']['MaxDiskWriteSpeedOwnRestart'] %>

MinDiskWriteSpeed=<%= node['ndb']['MinDiskWriteSpeed'] %>

<% end -%>


[MYSQLD DEFAULT]

[NDB_MGMD DEFAULT]

[TCP DEFAULT]
OverloadLimit=<%= node['ndb']['OverloadLimit'] %>

#
# Supports up to Max 2 ndb_mgmds. First one gets ArbitrationRank=1, second gets lower priority ArbitrationRank=2
#
<% id = node['mgm']['id'] -%>
<% rank = 1 -%>
<% for mgmd in node['ndb']['mgmd']['private_ips'] -%>
[NDB_MGMD]
NodeId=<%= id %>
HostName=<%= mgmd %>
PortNumber=<%= node['ndb']['mgmd']['port'] %>
DataDir=<%= node['ndb']['log_dir'] %>
LogDestination=FILE:filename=<%= node['ndb']['log_dir'] %>/cluster.log,maxsize=10000000,maxfiles=6
ArbitrationRank=<%= rank %>
<% id += 1 -%>
<% rank += 1 -%>
<% end -%>

<% id = 1 -%>
<% if (node.attribute?(:ndb) && node['ndb'].attribute?(:ndbd) && node['ndb']['ndbd'].attribute?(:ips_ids) && !node['ndb']['ndbd']['ips_ids'].empty?) -%>

<% for datanode in node['ndb']['ndbd']['ips_ids'] -%>
<% theNode = datanode.split(":") -%>
[NDBD] 
NodeId=<%= theNode[1] %>
HostName=<%= theNode[0] %>
ServerPort=<%= node['ndb']['ndbd']['port'] %>
DataDir=<%= node['ndb']['log_dir'] %>
FileSystemPath=<%= "#{node['ndb']['data_dir']}/#{theNode[1]}" %>
FileSystemPathDD=<%= "#{node['ndb']['diskdata_dir']}/#{theNode[1]}" %>
BackupDataDir=<%= node['ndb']['BackupDataDir'] %>
<% end -%>

<% else -%>
<% for ndbdNode in node['ndb']['ndbd']['private_ips'] -%>
[NDBD] 
NodeId=<%= id %>
HostName=<%= ndbdNode %>
ServerPort=<%= node['ndb']['ndbd']['port'] %>
DataDir=<%= node['ndb']['log_dir'] %>
FileSystemPath=<%= "#{node['ndb']['data_dir']}/#{id}" %>
FileSystemPathDD=<%= "#{node['ndb']['diskdata_dir']}/#{id}" %>
BackupDataDir=<%= node['ndb']['BackupDataDir'] %>
<% id += 1 -%>
<% end -%>

<% end -%>

#MySQL Servers, Memcached servers, and Clusterj clients.

<% if (node.attribute?('ndb') && node['ndb'].attribute?('mysqld') && node['ndb']['mysqld'].attribute?(:ips_ids) && !node['ndb']['mysqld']['ips_ids'].empty?) -%>

<% for mysqld in node['ndb']['mysqld']['ips_ids'] -%>
<% theMysqld = mysqld.split(":") -%>
[MYSQLD]
NodeId=<%= theMysqld[1] %>
HostName=<%= theMysqld[0] %>
<% end -%>

<% else -%>

<% hostId = node['mysql']['id'] -%>
<% if (node.attribute?(:ndb) && node['ndb'].attribute?(:mysqld) && node['ndb']['mysqld'].attribute?(:private_ips) && !node['ndb']['mysqld']['private_ips'].empty?) -%>
<% for mysql in node['ndb']['mysqld']['private_ips'] -%>
# for count in 0..(@num_client_slots-1)
[MYSQLD]
NodeId=<%= hostId %>
HostName=<%= mysql %>
<% hostId += 1 -%>
<% end -%>
<% end -%>

<% end -%>

<% hostId = node['nn']['id'] -%>
<% if (node.attribute?(:hops) && node['hops'].attribute?(:nn) && node['hops']['nn'].attribute?(:private_ips) && !node['hops']['nn']['private_ips'].empty?) -%>
<% for nn in node['hops']['nn']['private_ips'] -%>
[MYSQLD]
NodeId=<%= hostId %>
HostName=<%= nn %>
<% hostId += 1 -%>
<% end -%>
<% end -%>

# These slots are extra slots for any clients.
# Remove these slots for production use.
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
[MYSQLD]
