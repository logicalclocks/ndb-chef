#!/usr/bin/env bash

## Connection string to NDB Management server
MGM_CONN=<%= node['ndb']['connectstring'] %>
## User running NDB Data Nodes
MYSQL_USER=<%= node['ndb']['user'] %>
## Installation directory of MySQL
MYSQL_ROOT=<%= node['mysql']['base_dir'] %>
## Directory at NDB Data Nodes where the local backup is stored
## NOTE: Do NOT include the BACKUP/ directory that NDB adds by default
REMOTE_MYSQL_BACKUP_DIR=<%= node['ndb']['BackupDataDir'] %>

## Location of the socket to connect to mysql
MYSQL_SOCKET=<%= node['ndb']['mysql_socket'] %>

## Directory at local machine where backups will be stored temporarily
LOCAL_BACKUP_DIR=<%= node['ndb']['local_backup_dir'] %>
BACKUP_LOG_FILE=<%= node['ndb']['log_dir'] %>/ndb_native_backup.log
RSYNC_LOG_FILE=<%= node['ndb']['log_dir'] %>/rsync_native_backup.log


## Use the INFO, WARN, ERROR functions instead
function log {
    now=$(date)
    echo "$now - $1 - $2" >> "$BACKUP_LOG_FILE"
}

function log_info {
    log "INFO" "$1"
}

function log_warn {
    log "WARN" "$1"
}

function log_error {
    log "ERROR" "$1"
}

## Perform sanity checks

function check_for_empty_properties {
    if [ -z ${2// } ];
    then
	log_error "Property $1 is empty. Aborting backup."
	exit 10
    fi
}

function check_for_whitespaces {
    echo "$2" | egrep -q "[[:space:]]"
    if [ $? -eq 0 ];
    then
	log_error "Property $1 has whitespace. Aborting backup."
	exit 11
    fi
}

## $1: Name of the property
## $2: Property value
function sanity_check {
    check_for_empty_properties "$1" "$2"
    check_for_whitespaces "$1" "$2"
}

## Variables should be in double quotes to include any whitespaces
sanity_check "MGM_CONN" "$MGM_CONN"
sanity_check "MYSQL_USER" "$MYSQL_USER"
sanity_check "MYSQL_ROOT" "$MYSQL_ROOT"
sanity_check "REMOTE_MYSQL_BACKUP_DIR" "$REMOTE_MYSQL_BACKUP_DIR"
sanity_check "LOCAL_BACKUP_DIR" "$LOCAL_BACKUP_DIR"
sanity_check "BACKUP_LOG_FILE" "$BACKUP_LOG_FILE"
sanity_check "RSYNC_LOG_FILE" "$RSYNC_LOG_FILE"

## $1: Exit code to be examined
## $2: Error message to be logged
## $3: Backup script exit code
function check_exit_code {
    if [ "$1" -ne 0 ];
    then
	log_error "$2"
	exit "$3"
    fi
}

unset -v delete_existing_backup

while getopts 'fh' opt; do
    case "$opt" in
        f)
            delete_existing_backup=1
            ;;
        ?|h)
            echo -e "Usage $(basename $0) -f\n\t-f Optionally delete backup with the same ID instead of failing"
            exit 2
            ;;
    esac
done

## Get participating NDB Data Nodes in the cluster
NDB_DATANODES="$($MYSQL_ROOT/bin/ndb_mgm -c $MGM_CONN -e "SHOW" | grep Nodegroup | awk -F ' ' '{print $2}' | cut -c2-)"
log_info "Participating NDB Data Nodes: $NDB_DATANODES"

if [ -z "$RONDB_BACKUP_ID" ];
then
    backup_id=$(date +'%y%V%u%M')
else
    backup_id=$RONDB_BACKUP_ID
fi

if [ $delete_existing_backup ]; then
    # Delete existing backup with the same id
    for i in $NDB_DATANODES
    do
        log_info "Deleting backup with ID BACKUP-$backup_id from node $i"
        ssh ${MYSQL_USER}@${i} "rm -rf $REMOTE_MYSQL_BACKUP_DIR/BACKUP/BACKUP-$backup_id"
        check_exit_code $? "Deleting existing backup with id $backup_id from $i failed, aborting. Exit code: $?" 3
    done
fi

log_info "Starting NDB native backup with ID BACKUP-$backup_id"
## Start NDB native backup with backup ID $backup_id
## SNAPSHOTEND: Transactions committed during backup will be restored
## WAIT COMPLETED: Command will return when backup has completed
$MYSQL_ROOT/bin/ndb_mgm -c $MGM_CONN -e "START BACKUP $backup_id SNAPSHOTEND WAIT COMPLETED" >>	$BACKUP_LOG_FILE 2>&1
check_exit_code $? "NDB backup failed. Exit code: $?" 1


log_info "Finished NDB native backup with ID BACKUP-$backup_id"
if [ ! -d $LOCAL_BACKUP_DIR ];
then
    log_warn "Local temporary backup dir $LOCAL_BACKUP_DIR does not exist, creating it..."
    mkdir -p $LOCAL_BACKUP_DIR
fi

## Name pattern should be the same on the rotation script on target machine, if used
if [ -z "$RONDB_BACKUP_NAME" ];
then
    backup_name=hops_hopsworks_$(date +'%y-%m-%d_%H-%M').backup_${backup_id}
else
    backup_name=$RONDB_BACKUP_NAME
fi
backup_target=$LOCAL_BACKUP_DIR/$backup_name

if [ $delete_existing_backup ]; then
    # Delete existing backup with the same id
    log_info "Deleting $backup_target"
    rm -rf "$backup_target"
    log_info "Deleting $LOCAL_BACKUP_DIR/$backup_name.tar.gz"
    rm -f "$LOCAL_BACKUP_DIR/$backup_name".tar.gz
fi

if [ -d "$backup_target" ];
then
    log_error "Ooops directory $backup_target already exist in the local filesystem! Canceling copying backup from Data Nodes"
    exit 2
fi

ndb_backup_target=${backup_target}/BACKUP
mkdir -p ${ndb_backup_target}

## copy backup from Data Nodes to localhost
for i in $NDB_DATANODES
do
    log_info "Moving backup with ID BACKUP-$backup_id from node $i"
    rsync -e "ssh -o StrictHostKeyChecking=no" -az --log-file=$RSYNC_LOG_FILE $MYSQL_USER@"$i":$REMOTE_MYSQL_BACKUP_DIR/BACKUP/BACKUP-"$backup_id" "$ndb_backup_target"
    check_exit_code $? "rsync from $i failed, aborting. Exit code: $?" 3
done

sql_backup_target=${backup_target}/sql
mkdir -p ${sql_backup_target}

# Backing up the schemas
DB_LIST=`$MYSQL_ROOT/bin/mysql -u root -S $MYSQL_SOCKET -Nse "SELECT GROUP_CONCAT(SCHEMA_NAME SEPARATOR ' ') FROM information_schema.SCHEMATA WHERE SCHEMA_NAME NOT IN ('mysql','information_schema','performance_schema','sys','ndbinfo','glassfish_timers');"`
if [ "$DB_LIST" == "NULL" ];
then
    log_info "No MySQL databases to backup, continue..."
    touch "$sql_backup_target"/schemata.sql
else
    $MYSQL_ROOT/bin/mysqldump -u root -S $MYSQL_SOCKET --no-data --skip-add-drop-table --triggers --routines --events --databases $DB_LIST  > "$sql_backup_target"/schemata.sql
fi

# We need to do this hack because when restoring this file the tables already exist and the restoration fails
# Still we need to restore this SQL file to re-create the views
sed -i 's/CREATE TABLE[[:space:]]/CREATE TABLE IF NOT EXISTS /g' "$sql_backup_target"/schemata.sql

# Backing up the users
$MYSQL_ROOT/bin/mysqlpump -u root -S $MYSQL_SOCKET --exclude-databases=%% --exclude-users=root,mysql.sys,mysql.session,mysql.infoschema --users > "$sql_backup_target"/users.sql
# do not create a user if it already exists
sed -i "s/CREATE USER[[:space:]]'/CREATE USER IF NOT EXISTS '/g" "$sql_backup_target"/users.sql

pushd $LOCAL_BACKUP_DIR
tar cfz "$backup_name".tar.gz "$backup_name"
popd

log_info "Finished backup"
