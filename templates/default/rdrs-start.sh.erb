#!/usr/bin/env sh 

OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<%= node['mysql']['base_dir'] %>/lib/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:<%= node['mysql']['base_dir'] %>/lib/private/

<%= node['mysql']['base_dir'] %>/bin/rdrs -config=<%= node['ndb']['root_dir'] %>/rdrs_config.json  2>&1 >> <%= node['ndb']['log_dir'] %>/rdrs_out.log &

pid=$!
echo $pid > <%= node['ndb']['log_dir'] %>/rdrs.pid

# above we have added .../lib/private to LD_LIBRARY_PATH which contains libcrypto.
# This libcrypto maybe incompatible with the default libcrypto required by the system.
# This could fail the openssl command  https://github.com/openssl/openssl/issues/11856
export LD_LIBRARY_PATH=$OLD_LD_LIBRARY_PATH

# wait for the server to connect to RonDB
for n in `seq 1 60`
do
  sleep 1

  PROTO="http"
  echo ^d | openssl s_client -connect 127.0.0.1:<%= node['ndb']['rdrs']['rest']['bind_port'] %>  > /dev/null 2>&1  && PROTO="https"
  curl -k -s --fail  $PROTO://127.0.0.1:<%= node['ndb']['rdrs']['rest']['bind_port'] %>/<%= node['ndb']['rdrs']['version'] %>/ping > /dev/null 2>&1

  ret=$?

  if [ "$ret" -eq "0" ]; then
   exit 0;
  fi
done

exit 1
